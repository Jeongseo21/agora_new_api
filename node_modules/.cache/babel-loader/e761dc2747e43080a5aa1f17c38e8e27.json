{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\hjs05\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\agora-new-api-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\hjs05\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\agora-new-api-test\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\hjs05\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\agora-new-api-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\hjs05\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\agora-new-api-test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport AgoraRTM from \"agora-rtm-sdk\";\nimport randomColor from \"randomcolor\";\nvar USER_ID = Math.floor(Math.random() * 100000001);\nexport default function useAgoraChat(client, channelName) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      joinState = _useState2[0],\n      setJoinState = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      members = _useState6[0],\n      setMembers = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      currentMessage = _useState8[0],\n      setCurrentMessage = _useState8[1];\n\n  var color = useRef(randomColor({\n    luminosity: \"dark\"\n  })).current;\n  var channel = useRef(client.createChannel(channelName)).current; // async function join(channel, token, uid) {\n  //   if (!client) return;\n  //   await client.join(appid, channel, token);\n  //   await client.publish([microphoneTrack, cameraTrack]);\n  //   setJoinState(true);\n  // }\n\n  var initRm = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.login({\n                uid: USER_ID.toString()\n              });\n\n            case 2:\n              channel.getMembers().then(function (res) {\n                setMembers(res);\n              }).catch(function (err) {\n                return console.log(err);\n              }); // if (!members.includes(USER_ID.toString())) {\n\n              _context.next = 5;\n              return channel.join();\n\n            case 5:\n              _context.next = 7;\n              return client.setLocalUserAttributes({\n                name: USER_ID.toString(),\n                color: color\n              });\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function initRm() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    initRm();\n  }, [USER_ID]);\n  useEffect(function () {\n    channel.on(\"ChannelMessage\", function (data, uid) {\n      handleMessageReceived(data, uid);\n    });\n  });\n\n  function handleMessageReceived(_x, _x2) {\n    return _handleMessageReceived.apply(this, arguments);\n  }\n\n  function _handleMessageReceived() {\n    _handleMessageReceived = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(data, uid) {\n      var user, newMessageData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return client.getUserAttributes(uid);\n\n            case 2:\n              user = _context2.sent;\n              console.log(data);\n\n              if (data.messageType === \"TEXT\") {\n                newMessageData = {\n                  user: user,\n                  messsage: data.text\n                };\n                setCurrentMessage(newMessageData);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _handleMessageReceived.apply(this, arguments);\n  }\n\n  function sendChannelMessage(_x3) {\n    return _sendChannelMessage.apply(this, arguments);\n  }\n\n  function _sendChannelMessage() {\n    _sendChannelMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(text) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              channel.sendMessage({\n                text: text\n              }).then(function () {\n                setCurrentMessage({\n                  user: {\n                    name: \"Current User (Me)\",\n                    color: color\n                  },\n                  message: text\n                });\n              }).catch(function (err) {\n                console.log(err);\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _sendChannelMessage.apply(this, arguments);\n  }\n\n  useEffect(function () {\n    if (currentMessage) setMessages([].concat(_toConsumableArray(messages), [currentMessage]));\n  }, [currentMessage]);\n  return {\n    messages: messages,\n    sendChannelMessage: sendChannelMessage,\n    color: color\n  };\n}","map":{"version":3,"sources":["C:/Users/hjs05/OneDrive/바탕 화면/agora-new-api-test/src/hooks/useAgoraChat.js"],"names":["React","useEffect","useState","useRef","AgoraRTM","randomColor","USER_ID","Math","floor","random","useAgoraChat","client","channelName","joinState","setJoinState","messages","setMessages","members","setMembers","currentMessage","setCurrentMessage","color","luminosity","current","channel","createChannel","initRm","login","uid","toString","getMembers","then","res","catch","err","console","log","join","setLocalUserAttributes","name","on","data","handleMessageReceived","getUserAttributes","user","messageType","newMessageData","messsage","text","sendChannelMessage","sendMessage","message"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nimport AgoraRTM from \"agora-rtm-sdk\";\r\n\r\nimport randomColor from \"randomcolor\";\r\n\r\nlet USER_ID = Math.floor(Math.random() * 100000001);\r\n\r\nexport default function useAgoraChat(client, channelName) {\r\n  const [joinState, setJoinState] = useState(false);\r\n\r\n  let [messages, setMessages] = useState([]);\r\n  let [members, setMembers] = useState([]);\r\n\r\n  let [currentMessage, setCurrentMessage] = useState();\r\n\r\n  let color = useRef(randomColor({ luminosity: \"dark\" })).current;\r\n  let channel = useRef(client.createChannel(channelName)).current;\r\n\r\n  // async function join(channel, token, uid) {\r\n\r\n  //   if (!client) return;\r\n\r\n  //   await client.join(appid, channel, token);\r\n  //   await client.publish([microphoneTrack, cameraTrack]);\r\n\r\n  //   setJoinState(true);\r\n  // }\r\n\r\n  const initRm = async () => {\r\n    await client.login({\r\n      uid: USER_ID.toString()\r\n    });\r\n\r\n    channel\r\n      .getMembers()\r\n      .then((res) => {\r\n        setMembers(res);\r\n      })\r\n      .catch((err) => console.log(err));\r\n\r\n    // if (!members.includes(USER_ID.toString())) {\r\n    await channel.join();\r\n    // }\r\n\r\n    await client.setLocalUserAttributes({\r\n      name: USER_ID.toString(),\r\n      color\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    initRm();\r\n  }, [USER_ID]);\r\n\r\n  useEffect(() => {\r\n    channel.on(\"ChannelMessage\", (data, uid) => {\r\n      handleMessageReceived(data, uid);\r\n    });\r\n  });\r\n\r\n  async function handleMessageReceived(data, uid) {\r\n    let user = await client.getUserAttributes(uid);\r\n\r\n    console.log(data);\r\n    if (data.messageType === \"TEXT\") {\r\n      let newMessageData = { user, messsage: data.text };\r\n      setCurrentMessage(newMessageData);\r\n    }\r\n  }\r\n\r\n  async function sendChannelMessage(text) {\r\n    channel\r\n      .sendMessage({ text })\r\n      .then(() => {\r\n        setCurrentMessage({\r\n          user: { name: \"Current User (Me)\", color },\r\n          message: text\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (currentMessage) setMessages([...messages, currentMessage]);\r\n  }, [currentMessage]);\r\n\r\n  return { messages, sendChannelMessage, color };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}